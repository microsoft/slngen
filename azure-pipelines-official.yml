resources:
- repo: self

variables:
  ArtifactsDirectoryName: 'artifacts'
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  DotNet6Version: '6.x'
  DotNet7Version: '7.x'
  DotNet8Version: '8.x'
  DotNet9Version: '9.x'
  # Not using "--channel 9.0 --quality daily", see https://github.com/microsoft/slngen/issues/456
  DotNet9InstallArgs: '-version 9.0.100-alpha.1.23528.2'
  MSBuildArgs: '"/Property:Platform=$(BuildPlatform);Configuration=$(BuildConfiguration)" "/BinaryLogger:$(Build.SourcesDirectory)\$(ArtifactsDirectoryName)\msbuild.binlog"'
  SignType: 'Test'

trigger:
  batch: true
  branches:
    include:
    - 'main'
    - 'refs/tags/*'
  paths:
    exclude:
    - '*.md'

stages:
- stage:
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      name: 'VSEngSS-MicroBuild2022-1ES'
    steps:
    - script: 'echo ##vso[task.setvariable variable=SignType;]Real'
      displayName: 'Set SignType to Real for tagged commits'
      condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))

    - task: UseDotNet@2
      displayName: 'Install .NET $(DotNet6Version)'
      inputs:
        version: '$(DotNet6Version)'

    - task: UseDotNet@2
      displayName: 'Install .NET $(DotNet7Version)'
      inputs:
        version: '$(DotNet7Version)'

    - task: UseDotNet@2
      displayName: 'Install .NET $(DotNet8Version)'
      inputs:
        version: '$(DotNet8Version)'
        includePreviewVersions: true

    - script: |
        powershell -NoProfile -ExecutionPolicy unrestricted -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; &([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) $(DotNet9InstallArgs) -InstallDir C:\ToolCache\dotnet"
        dotnet --info
      displayName: 'Install .NET $(DotNet9Version)'

    - task: MicroBuildSigningPlugin@1
      displayName: 'Install MicroBuild Signing Plugin'
      inputs:
        signType: '$(SignType)'
        zipSources: false

    - task: VSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '**\*.sln'
        msbuildArgs: '$(MSBuildArgs)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(ArtifactsDirectoryName)'
        ArtifactName: $(ArtifactsDirectoryName)
      condition: always()

- stage:
  displayName: 'Deploy'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  jobs:
  - deployment: 'NuGet'
    displayName: 'Publish NuGet Packages'
    pool:
      vmImage: 'windows-latest'
    environment: 'SlnGen-NuGet'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'Push NuGet Packages to nuget.org'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(ArtifactsDirectoryName)/**/Microsoft.VisualStudio.SlnGen*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet-1ES-Full'
            condition: always()

          - task: NuGetCommand@2
            displayName: 'Push SlnGen.Corext'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/$(ArtifactsDirectoryName)/**/SlnGen.Corext*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'CloudBuild-Push'
            condition: always()
