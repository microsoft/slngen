<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFrameworks>net472;net8.0;net9.0</TargetFrameworks>
  <TargetFrameworks Condition="'$(TargetDotNet10)' == 'true'">$(TargetFrameworks);net10.0</TargetFrameworks>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.config</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <IncludeReferenceCopyLocalPathsInBuildOutputInPackage>true</IncludeReferenceCopyLocalPathsInBuildOutputInPackage>
    <IsTool>true</IsTool>
    <NoWarn>$(NoWarn);NU5128;MSB3270</NoWarn>
    <Prefer32Bit>false</Prefer32Bit>
    <RollForward>LatestMinor</RollForward>
    <ServerGarbageCollection>true</ServerGarbageCollection>
    <ConcurrentGarbageCollection>false</ConcurrentGarbageCollection>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <PackageReference>
      <PrivateAssets>All</PrivateAssets>
    </PackageReference>
  </ItemDefinitionGroup>
  <Import Project="..\Shared\Shared.props" />
  <ItemGroup>
    <PackageReference Include="McMaster.Extensions.CommandLineUtils" />
    <PackageReference Include="Microsoft.Build" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.Build.Runtime" IncludeAssets="None" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.Extensions.FileSystemGlobbing" />
    <PackageReference Include="System.Configuration.ConfigurationManager" ExcludeAssets="Runtime" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="$(PkgMicrosoft_Build_Runtime)\contentFiles\any\net472\MSBuild.exe" Private="false" Condition="'$(TargetFramework)' == 'net472'" />
    <Reference Include="$(PkgMicrosoft_Build_Runtime)\contentFiles\any\net8.0\MSBuild.dll" Private="false" Condition="'$(TargetFramework)' == 'net8.0'" />
    <Reference Include="$(PkgMicrosoft_Build_Runtime)\contentFiles\any\net9.0\MSBuild.dll" Private="false" Condition="'$(TargetFramework)' == 'net9.0' Or '$(TargetFramework)' == 'net10.0'" />
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" Condition="'$(TargetFramework)' == 'net472'" />
    <None Include="Microsoft.VisualStudio.SlnGen.targets" Pack="true" PackagePath="build/;buildMultiTargeting/" />
  </ItemGroup>
  <!--
    By default, this application will use the same runtime as whatever version it was built against.  In reality, this application
    should run against any version of the runtime with the same major version.  This logic gets the major, minor, and build version
    and sets RuntimeFramework.Version to the major.minor.build-alpha so at runtime it will work against any version of the runtime with
    the same major version.
  -->
  <Target Name="SetRuntimeFramework" BeforeTargets="GenerateBuildRuntimeConfigurationFiles">
    <PropertyGroup>
      <_MajorMinorBuildRuntimeFramework>$([System.Text.RegularExpressions.Regex]::Match(%(RuntimeFramework.Version), '^\d+\.\d+\.\d+'))</_MajorMinorBuildRuntimeFramework>
      <_PreviousRuntimeFramework>%(RuntimeFramework.Version)</_PreviousRuntimeFramework>
    </PropertyGroup>
    <ItemGroup>
      <RuntimeFramework Update="@(RuntimeFramework)" Version="$(_MajorMinorBuildRuntimeFramework)-alpha" />
    </ItemGroup>
  </Target>
  <Target Name="RestoreRuntimeFramework" AfterTargets="GenerateBuildRuntimeConfigurationFiles">
    <ItemGroup>
      <RuntimeFramework Update="@(RuntimeFramework)" Version="$(_PreviousRuntimeFramework)" />
    </ItemGroup>
  </Target>
</Project>
