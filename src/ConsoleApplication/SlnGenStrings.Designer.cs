//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SlnGen {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SlnGenStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SlnGenStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SlnGen.SlnGenStrings", typeof(SlnGenStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the path to the VS development environment exe (overrides VSDEVENV environment variable and registry key for launcher)..
        /// </summary>
        internal static string devenvUsage {
            get {
                return ResourceManager.GetString("devenvUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to turn errors on and off. Prefix name with - to turn off. &quot;none&quot;, &quot;default&quot;, and &quot;all&quot; can be used as well..
        /// </summary>
        internal static string errorUsage {
            get {
                return ResourceManager.GetString("errorUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify files and directories to operate on..
        /// </summary>
        internal static string fileUsage {
            get {
                return ResourceManager.GetString("fileUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fix the tools version of the project files being loaded to correspond with the target visual studio version..
        /// </summary>
        internal static string fixToolsVersionUsage {
            get {
                return ResourceManager.GetString("fixToolsVersionUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Opens VS in EXP hive mode..
        /// </summary>
        internal static string hiveUsage {
            get {
                return ResourceManager.GetString("hiveUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to What reverse dependencies to load. 1 (default) means include reverse dependencies of first level project. 2 means also include reverse dependencies of forward dependencies of first level projects, etc..
        /// </summary>
        internal static string includeReverseLevelUsage {
            get {
                return ResourceManager.GetString("includeReverseLevelUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include reverse dependencies (and the forward dependencies of those) going down the specified number of times..
        /// </summary>
        internal static string includeReverseUsage {
            get {
                return ResourceManager.GetString("includeReverseUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create nested solution folders that mirror the file system..
        /// </summary>
        internal static string nestUsage {
            get {
                return ResourceManager.GetString("nestUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t launch VS, just create the .sln file..
        /// </summary>
        internal static string noLaunchUsage {
            get {
                return ResourceManager.GetString("noLaunchUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the output file name (specifying full path overrides /w or /k)..
        /// </summary>
        internal static string outputUsage {
            get {
                return ResourceManager.GetString("outputUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows for overriding default value of properties for cases where these impact projects picked up during traversal. Example: /p:Platform=x64.
        /// </summary>
        internal static string propertyUsage {
            get {
                return ResourceManager.GetString("propertyUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes temporary files created by SlnGen..
        /// </summary>
        internal static string purgeUsage {
            get {
                return ResourceManager.GetString("purgeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quiet: don&apos;t print warnings about projects..
        /// </summary>
        internal static string quietUsage {
            get {
                return ResourceManager.GetString("quietUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recurse on the specified directory..
        /// </summary>
        internal static string recurseUsage {
            get {
                return ResourceManager.GetString("recurseUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use paths relative to the solution file for projects listed in the solution file instead of full paths..
        /// </summary>
        internal static string relativeUsage {
            get {
                return ResourceManager.GetString("relativeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Build and run the current project inside VS..
        /// </summary>
        internal static string runUsage {
            get {
                return ResourceManager.GetString("runUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write the new .sln file in the current directory. Takes precedence over /k..
        /// </summary>
        internal static string useCurrentUsage {
            get {
                return ResourceManager.GetString("useCurrentUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Write the new .sln file relative to workspace root. This is the default..
        /// </summary>
        internal static string useWorkspaceUsage {
            get {
                return ResourceManager.GetString("useWorkspaceUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only run validation. Does not generate solution files or launch visual studio,.
        /// </summary>
        internal static string validateUsage {
            get {
                return ResourceManager.GetString("validateUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verbosely describe what is happening..
        /// </summary>
        internal static string verboseUsage {
            get {
                return ResourceManager.GetString("verboseUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target Visual Studio version for the solution. Supported values: 10, 11, 12 and 14..
        /// </summary>
        internal static string versionUsage {
            get {
                return ResourceManager.GetString("versionUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semi-colon delimited list of file(s) that indicate the root of the workspace was reached..
        /// </summary>
        internal static string workspaceFilesUsage {
            get {
                return ResourceManager.GetString("workspaceFilesUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Solution files go in this directory when choosing the /k option..
        /// </summary>
        internal static string workspaceSubDir {
            get {
                return ResourceManager.GetString("workspaceSubDir", resourceCulture);
            }
        }
    }
}
